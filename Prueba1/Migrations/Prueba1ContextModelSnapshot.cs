// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prueba1.Data;

#nullable disable

namespace Prueba1.Migrations
{
    [DbContext(typeof(Prueba1Context))]
    partial class Prueba1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prueba1.Models.MVCException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Handled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Trace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("log_exceptions");
                });

            modelBuilder.Entity("Prueba1.Models.Permisos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReglaId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReglaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("Prueba1.Models.Productos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Prueba1.Models.Reglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxId")
                        .HasColumnType("integer");

                    b.Property<string>("Regla")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaxId");

                    b.ToTable("Reglas");
                });

            modelBuilder.Entity("Prueba1.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fueto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Prueba1.Models.MVCException", b =>
                {
                    b.HasOne("Prueba1.Models.Usuarios", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prueba1.Models.Permisos", b =>
                {
                    b.HasOne("Prueba1.Models.Reglas", "Regla")
                        .WithMany()
                        .HasForeignKey("ReglaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prueba1.Models.Usuarios", "Usuario")
                        .WithMany("Permisos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regla");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Prueba1.Models.Reglas", b =>
                {
                    b.HasOne("Prueba1.Models.Reglas", "Max")
                        .WithMany()
                        .HasForeignKey("MaxId");

                    b.Navigation("Max");
                });

            modelBuilder.Entity("Prueba1.Models.Usuarios", b =>
                {
                    b.Navigation("Permisos");
                });
#pragma warning restore 612, 618
        }
    }
}
